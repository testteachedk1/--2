// let - Особенности:
// Блочная область видимости: переменная существует только внутри {}.
// Можно менять значение, но нельзя переобъявить в одной области.
// Поднимается, но недоступна до фактического объявления (ошибка, если использовать раньше).

// var - Особенности:
// Функциональная область видимости: переменная доступна во всей функции, даже если объявлена внутри блока.
// Поднимается (hoisting): объявление переносится наверх, но значение = undefined.
// Можно переобъявить и перезаписать.

// const - константа - Особенности:
// Блочная область видимости: переменная существует только внутри {}.
// Обязательное присвоение значения
// Нельзя перезаписать, но можно менять содержимое в массиве/объекте



function typeData() {
    let String = "12";
    let Number;
    let Boolean = false;
    
    null, undefined

    let User = {
        // ключ: значение
        name: "Petya",
        old: 12,
        id: 3094380952903741932748234,
        date: Date(),

    }
    console.log(User.name, User.old)
    let Array = [
        1, 2, 3, 'number', 'vasya', false, true
    ]
    
    let numberCount = 0;
    let stringCount = 0;
    let boolCount = 0;
    for (let i = 0; i < Array.length; i++) {
        if (typeof Array[i] == "number") {
            numberCount++
        }
        if (typeof Array[i] == "string") {
            stringCount++
        }
        if (typeof Array[i] == "boolean") {
            boolCount++
        }
    }
    console.log("Количество чисел в массиве Array: ", numberCount)
    console.log("Количество строк в массиве Array: ", stringCount)
    console.log("Количество логических значений в массиве Array: ", boolCount)
    let result = boolCount + User.old
    console.log(result);
    
}
typeData()


 //переменная которая хранит число


//объявить все переменные всех видов, 
// для let все типы (строка, число, логический, массив и объект) 
//  для const все типы (строка, число, логический, массив и объект)
//  для var все типы (строка, число, логический, массив и объект)
// вывести все в консоль лог
// сделать первый коммит
// как делать коммит: после того, как ты все напишешь в терминале пишем:
// cd --2
// git add . (эту скобку не надо, строка для добавления всех изменений)
// git commit -m "First Commit" (строка для создания коммита)



## Стандартные (из математики)

`+` - сложение
`-` - вычитание
`/` - деление
`*` - умножение
`**` - возведение в степень
`%` - остаток от деления

это все бинарные операторы, т.к. применяются к двум операндам a и b


const a = 2
const b = 3
let result = 0
result = a + b //результат: 5
result = a - b //результат: -1
result = a / b //результат: 2\3
result = a * b //результат: 6
result = a ** b //результат: 8
result = a % b //результат: 2


унарные операторы, например

let minus = -10 //оператор - в данном случе унарный оператор, т.к. применятеся к однму операнду и делает число 10 отрицательным


let number = +'10'// + приведет строку к числовому значению, работае к любому типу данных, js попытается с помощью + привести любой тип к числу
let number = +true // 1
let number = +false // 0
let number = +' ' // 0
let number = +'' // 0
let number = +'null' // 0
let number = +'undefined' // NaN

let result = +'5' + +'8' //выдаст 13, так как сначала выпоняются унарные операторы, потом бинарные
let result = '5' + '8' //выдаст 58, строку с числом 58 внутри, произойдет конкатинация

let result = 2;

result = result + 3;
result = result - 3;
result = result * 3;
result = result / 3;
result = result ** 3;
result = result % 3;

АНАЛОГИЧНО:

result += 3;
result -= 3;
result *= 3;
result /= 3;
result **= 3;
result %= 3;

Декремент пишется как -- и уменьшает число на 1

result-- //если result = 2, то псле -- станет 1

--result

Инкремент пишется как ++ и увеличивает число на 1

result++ //если result = 2, то псле ++ станет 3

++result


инкремент/декремент можно записывать в префиксном варианте

let incr = 3
let newIncr = incr++ //в логе увидим incr = 4, newIncr = 3

let incr = 3
let newIncr = ++incr //в логе увидим incr = 4, newIncr = 4



## `while`

цикл выполняется пока условие в скобках не станет false

let count = 0

while (count < 10) {
	console.log(count)
	count++
}

//консоль лог выведет все значения от 0 до 9, 10 уже не подходит под условия внутри while




## `do while`

цикл сначала выполняет код внутри `do`, а затем только проверяет условие внутри `while`

let count = 0

do {
	console.log(count);
	count++
}
while (count < 10)

//консоль лог выведет все значения от 0 до 9, 10 уже не подходит под условия внутри while



## `for`

цикл выполняется по итерациям, которые можно контролировать, также можно поставить условия

`знаю как он работает`



## Продолжение и прерывание цикла

`break` - прерывает цикл


let count = 0
while (count < 10) {
	if (count % 5 === 0) {
		break // прерываем цикл, если число кратно десяти
	}
	count++ // увеличиваем число
}


`continue` - позволяет перейти к следующей итерации цикла без выполнения следующего кода

for (let i = 0; i < 10; i++) {
	if (i % 2 == 0) {
		continue
	} 
	console.log(i, "нечетный")
}
// выведутся только нечетный числа
